{"ast":null,"code":"/**\n * Browser Image Compression\n * v1.0.6\n * by Donald <donaldcwl@gmail.com>\n * https://github.com/Donaldcwl/browser-image-compression\n */\nfunction _slicedToArray(e, n) {\n  return function _arrayWithHoles(e) {\n    if (Array.isArray(e)) return e;\n  }(e) || function _iterableToArrayLimit(e, n) {\n    var r = [],\n        t = !0,\n        a = !1,\n        i = void 0;\n\n    try {\n      for (var o, s = e[Symbol.iterator](); !(t = (o = s.next()).done) && (r.push(o.value), !n || r.length !== n); t = !0);\n    } catch (e) {\n      a = !0, i = e;\n    } finally {\n      try {\n        t || null == s.return || s.return();\n      } finally {\n        if (a) throw i;\n      }\n    }\n\n    return r;\n  }(e, n) || function _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n  }();\n}\n\nvar e = \"undefined\" != typeof window && window.cordova && window.cordova.require(\"cordova/modulemapper\"),\n    CustomFile = e && e.getOriginalSymbol(window, \"File\") || File,\n    CustomFileReader = e && e.getOriginalSymbol(window, \"FileReader\") || FileReader;\n\nfunction getDataUrlFromFile(e) {\n  return new Promise(function (n, r) {\n    var t = new CustomFileReader();\n    t.onload = function () {\n      return n(t.result);\n    }, t.onerror = function (e) {\n      return r(e);\n    }, t.readAsDataURL(e);\n  });\n}\n\nfunction getFilefromDataUrl(e, n) {\n  var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : Date.now();\n  return new Promise(function (t) {\n    for (var a = e.split(\",\"), i = a[0].match(/:(.*?);/)[1], o = atob(a[1]), s = o.length, c = new Uint8Array(s); s--;) c[s] = o.charCodeAt(s);\n\n    var u = new Blob([c], {\n      type: i\n    });\n    u.name = n, u.lastModified = r, t(u);\n  });\n}\n\nfunction loadImage(e) {\n  return new Promise(function (n, r) {\n    var t = new Image();\n    t.onload = function () {\n      return n(t);\n    }, t.onerror = function (e) {\n      return r(e);\n    }, t.src = e;\n  });\n}\n\nfunction drawImageInCanvas(e) {\n  var n = _slicedToArray(getNewCanvasAndCtx(e.width, e.height), 2),\n      r = n[0];\n\n  return n[1].drawImage(e, 0, 0, r.width, r.height), r;\n}\n\nfunction drawFileInCanvas(e) {\n  return new Promise(function (n, r) {\n    var t,\n        a,\n        i = function $Try_1_Post() {\n      try {\n        return a = drawImageInCanvas(t), n([t, a]);\n      } catch (e) {\n        return r(e);\n      }\n    },\n        o = function $Try_1_Catch(n) {\n      try {\n        return getDataUrlFromFile(e).then(function (e) {\n          try {\n            return loadImage(e).then(function (e) {\n              try {\n                return t = e, i();\n              } catch (e) {\n                return r(e);\n              }\n            }, r);\n          } catch (e) {\n            return r(e);\n          }\n        }, r);\n      } catch (e) {\n        return r(e);\n      }\n    };\n\n    try {\n      return createImageBitmap(e).then(function (e) {\n        try {\n          return t = e, i();\n        } catch (e) {\n          return o();\n        }\n      }, o);\n    } catch (e) {\n      o();\n    }\n  });\n}\n\nfunction canvasToFile(e, n, r, t) {\n  var a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1;\n  return new Promise(function (i, o) {\n    var s;\n    return \"function\" == typeof OffscreenCanvas && e instanceof OffscreenCanvas ? e.convertToBlob({\n      type: n,\n      quality: a\n    }).then(function (e) {\n      try {\n        return (s = e).name = r, s.lastModified = t, $If_4.call(this);\n      } catch (e) {\n        return o(e);\n      }\n    }.bind(this), o) : getFilefromDataUrl(e.toDataURL(n, a), r, t).then(function (e) {\n      try {\n        return s = e, $If_4.call(this);\n      } catch (e) {\n        return o(e);\n      }\n    }.bind(this), o);\n\n    function $If_4() {\n      return i(s);\n    }\n  });\n}\n\nfunction getExifOrientation(e) {\n  return new Promise(function (n, r) {\n    var t = new CustomFileReader();\n    t.onload = function (e) {\n      var r = new DataView(e.target.result);\n      if (65496 != r.getUint16(0, !1)) return n(-2);\n\n      for (var t = r.byteLength, a = 2; a < t;) {\n        if (r.getUint16(a + 2, !1) <= 8) return n(-1);\n        var i = r.getUint16(a, !1);\n\n        if (a += 2, 65505 == i) {\n          if (1165519206 != r.getUint32(a += 2, !1)) return n(-1);\n          var o = 18761 == r.getUint16(a += 6, !1);\n          a += r.getUint32(a + 4, o);\n          var s = r.getUint16(a, o);\n          a += 2;\n\n          for (var c = 0; c < s; c++) if (274 == r.getUint16(a + 12 * c, o)) return n(r.getUint16(a + 12 * c + 8, o));\n        } else {\n          if (65280 != (65280 & i)) break;\n          a += r.getUint16(a, !1);\n        }\n      }\n\n      return n(-1);\n    }, t.onerror = function (e) {\n      return r(e);\n    }, t.readAsArrayBuffer(e);\n  });\n}\n\nfunction handleMaxWidthOrHeight(e, n) {\n  var r,\n      t = e.width,\n      a = e.height,\n      i = n.maxWidthOrHeight,\n      o = e;\n\n  if (Number.isInteger(i) && (t > i || a > i)) {\n    var s = _slicedToArray(getNewCanvasAndCtx(t, a), 2);\n\n    o = s[0], r = s[1], t > a ? (o.width = i, o.height = a / t * i) : (o.width = t / a * i, o.height = i), r.drawImage(e, 0, 0, o.width, o.height);\n  }\n\n  return o;\n}\n\nfunction followExifOrientation(e, n) {\n  var r = e.width,\n      t = e.height,\n      a = _slicedToArray(getNewCanvasAndCtx(r, t), 2),\n      i = a[0],\n      o = a[1];\n\n  switch (4 < n && n < 9 ? (i.width = t, i.height = r) : (i.width = r, i.height = t), n) {\n    case 2:\n      o.transform(-1, 0, 0, 1, r, 0);\n      break;\n\n    case 3:\n      o.transform(-1, 0, 0, -1, r, t);\n      break;\n\n    case 4:\n      o.transform(1, 0, 0, -1, 0, t);\n      break;\n\n    case 5:\n      o.transform(0, 1, 1, 0, 0, 0);\n      break;\n\n    case 6:\n      o.transform(0, 1, -1, 0, t, 0);\n      break;\n\n    case 7:\n      o.transform(0, -1, -1, 0, t, r);\n      break;\n\n    case 8:\n      o.transform(0, -1, 1, 0, 0, r);\n  }\n\n  return o.drawImage(e, 0, 0, r, t), i;\n}\n\nfunction getNewCanvasAndCtx(e, n) {\n  var r, t;\n\n  try {\n    t = (r = new OffscreenCanvas(e, n)).getContext(\"2d\");\n  } catch (e) {\n    t = (r = document.createElement(\"canvas\")).getContext(\"2d\");\n  }\n\n  return r.width = e, r.height = n, [r, t];\n}\n\nfunction compress(e, n) {\n  return new Promise(function (r, t) {\n    var a, i, o, s, c, u;\n    return a = n.maxIteration || 10, i = 1024 * n.maxSizeMB * 1024, drawFileInCanvas(e).then(function (l) {\n      try {\n        var m = _slicedToArray(l, 2);\n\n        return m[0], o = handleMaxWidthOrHeight(o = m[1], n), new Promise(function (r, t) {\n          var a;\n          if (!(a = n.exifOrientation)) return getExifOrientation(e).then(function (e) {\n            try {\n              return a = e, $If_2.call(this);\n            } catch (e) {\n              return t(e);\n            }\n          }.bind(this), t);\n\n          function $If_2() {\n            return r(a);\n          }\n\n          return $If_2.call(this);\n        }).then(function (l) {\n          try {\n            return n.exifOrientation = l, o = followExifOrientation(o, n.exifOrientation), s = 1, canvasToFile(o, e.type, e.name, e.lastModified, s).then(function (n) {\n              try {\n                var l,\n                    m = function $Loop_3() {\n                  if (a-- && u.size > i) {\n                    var n,\n                        r,\n                        c,\n                        l = _slicedToArray(getNewCanvasAndCtx(n = .9 * o.width, r = .9 * o.height), 2);\n\n                    return c = l[0], l[1].drawImage(o, 0, 0, n, r), \"image/jpeg\" === e.type && (s *= .9), canvasToFile(c, e.type, e.name, e.lastModified, s).then(function (e) {\n                      try {\n                        return u = e, o = c, $Loop_3;\n                      } catch (e) {\n                        return t(e);\n                      }\n                    }, t);\n                  }\n\n                  return [1];\n                },\n                    f = function $Loop_3_exit() {\n                  return r(u);\n                };\n\n                return (c = n).size <= i ? r(c) : (u = c, (l = function (e) {\n                  for (; e;) {\n                    if (e.then) return void e.then(l, t);\n\n                    try {\n                      if (e.pop) {\n                        if (e.length) return e.pop() ? f.call(this) : e;\n                        e = m;\n                      } else e = e.call(this);\n                    } catch (e) {\n                      return t(e);\n                    }\n                  }\n                }.bind(this))(m));\n              } catch (e) {\n                return t(e);\n              }\n            }.bind(this), t);\n          } catch (e) {\n            return t(e);\n          }\n        }.bind(this), t);\n      } catch (e) {\n        return t(e);\n      }\n    }.bind(this), t);\n  });\n}\n\nvar n,\n    r = 0;\n\nvar t = function createWorker(e) {\n  return new Worker(URL.createObjectURL(new Blob([\"(\".concat(e, \")()\")])));\n}(function () {\n  var e = !1;\n  self.addEventListener(\"message\", function (n) {\n    return new Promise(function (r, t) {\n      var a,\n          i,\n          o,\n          s,\n          c = n.data;\n      a = c.file, i = c.id, o = c.imageCompressionLibUrl, s = c.options;\n\n      var u = function $Try_1_Post() {\n        try {\n          return r();\n        } catch (e) {\n          return t(e);\n        }\n      },\n          l = function $Try_1_Catch(e) {\n        try {\n          return self.postMessage({\n            error: e.message + \"\\n\" + e.stack,\n            id: i\n          }), u();\n        } catch (e) {\n          return t(e);\n        }\n      };\n\n      try {\n        var m;\n        return e || (importScripts(o), e = !0), imageCompression(a, s).then(function (e) {\n          try {\n            return m = e, self.postMessage({\n              file: m,\n              id: i\n            }), u();\n          } catch (e) {\n            return l(e);\n          }\n        }, l);\n      } catch (e) {\n        l(e);\n      }\n    });\n  });\n});\n\nfunction compressOnWebWorker(e, a) {\n  return new Promise(function (i, o) {\n    return new Promise(function (s, c) {\n      n || (n = function createSourceObject(e) {\n        return URL.createObjectURL(new Blob([e], {\n          type: \"application/javascript\"\n        }));\n      }(\"\\n    function imageCompression (){return (\".concat(imageCompression, \").apply(null, arguments)}\\n\\n    imageCompression.getDataUrlFromFile = \").concat(imageCompression.getDataUrlFromFile, \"\\n    imageCompression.getFilefromDataUrl = \").concat(imageCompression.getFilefromDataUrl, \"\\n    imageCompression.loadImage = \").concat(imageCompression.loadImage, \"\\n    imageCompression.drawImageInCanvas = \").concat(imageCompression.drawImageInCanvas, \"\\n    imageCompression.drawFileInCanvas = \").concat(imageCompression.drawFileInCanvas, \"\\n    imageCompression.canvasToFile = \").concat(imageCompression.canvasToFile, \"\\n    imageCompression.getExifOrientation = \").concat(imageCompression.getExifOrientation, \"\\n    imageCompression.handleMaxWidthOrHeight = \").concat(imageCompression.handleMaxWidthOrHeight, \"\\n    imageCompression.followExifOrientation = \").concat(imageCompression.followExifOrientation, \"\\n\\n    getDataUrlFromFile = imageCompression.getDataUrlFromFile\\n    getFilefromDataUrl = imageCompression.getFilefromDataUrl\\n    loadImage = imageCompression.loadImage\\n    drawImageInCanvas = imageCompression.drawImageInCanvas\\n    drawFileInCanvas = imageCompression.drawFileInCanvas\\n    canvasToFile = imageCompression.canvasToFile\\n    getExifOrientation = imageCompression.getExifOrientation\\n    handleMaxWidthOrHeight = imageCompression.handleMaxWidthOrHeight\\n    followExifOrientation = imageCompression.followExifOrientation\\n\\n    getNewCanvasAndCtx = \").concat(getNewCanvasAndCtx, \"\\n    \\n    CustomFileReader = FileReader\\n    \\n    CustomFile = File\\n    \\n    function _slicedToArray(arr, n) { return arr }\\n\\n    function compress (){return (\").concat(compress, \").apply(null, arguments)}\\n    \")));\n      var u = r++;\n      return t.addEventListener(\"message\", function handler(e) {\n        e.data.id === u && (t.removeEventListener(\"message\", handler), e.data.error && o(new Error(e.data.error)), i(e.data.file));\n      }), t.postMessage({\n        file: e,\n        id: u,\n        imageCompressionLibUrl: n,\n        options: a\n      }), s();\n    });\n  });\n}\n\nfunction imageCompression(e, n) {\n  return new Promise(function (r, t) {\n    var a, i;\n    if (n.maxSizeMB = n.maxSizeMB || Number.POSITIVE_INFINITY, n.useWebWorker = \"boolean\" != typeof n.useWebWorker || n.useWebWorker, !(e instanceof Blob || e instanceof CustomFile)) return t(new Error(\"The file given is not an instance of Blob or File\"));\n    if (!/^image/.test(e.type)) return t(new Error(\"The file given is not an image\"));\n    if (i = \"undefined\" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope, !n.useWebWorker || \"function\" != typeof Worker || i) return compress(e, n).then(function (e) {\n      try {\n        return a = e, $If_3.call(this);\n      } catch (e) {\n        return t(e);\n      }\n    }.bind(this), t);\n\n    var o = function () {\n      try {\n        return $If_3.call(this);\n      } catch (e) {\n        return t(e);\n      }\n    }.bind(this),\n        s = function $Try_1_Catch(r) {\n      try {\n        return console.warn(\"Run compression in web worker failed:\", r, \", fall back to main thread\"), compress(e, n).then(function (e) {\n          try {\n            return a = e, o();\n          } catch (e) {\n            return t(e);\n          }\n        }, t);\n      } catch (e) {\n        return t(e);\n      }\n    };\n\n    try {\n      return compressOnWebWorker(e, n).then(function (e) {\n        try {\n          return a = e, o();\n        } catch (e) {\n          return s(e);\n        }\n      }, s);\n    } catch (e) {\n      s(e);\n    }\n\n    function $If_3() {\n      try {\n        a.name = e.name, a.lastModified = e.lastModified;\n      } catch (e) {}\n\n      return r(a);\n    }\n  });\n}\n\nimageCompression.getDataUrlFromFile = getDataUrlFromFile, imageCompression.getFilefromDataUrl = getFilefromDataUrl, imageCompression.loadImage = loadImage, imageCompression.drawImageInCanvas = drawImageInCanvas, imageCompression.drawFileInCanvas = drawFileInCanvas, imageCompression.canvasToFile = canvasToFile, imageCompression.getExifOrientation = getExifOrientation, imageCompression.handleMaxWidthOrHeight = handleMaxWidthOrHeight, imageCompression.followExifOrientation = followExifOrientation;\nexport default imageCompression;","map":null,"metadata":{},"sourceType":"module"}